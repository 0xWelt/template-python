[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "<package_name>"
version = "0.0.1"
dependencies = [
]
requires-python = ">=3.10"
description = ""
readme = "README.md"
keywords = []
classifiers = ["Programming Language :: Python"]

[tool.setuptools.packages.find]
include = ["<package_name>", "<package_name>.*"]

[tool.black]
line-length = 100
skip-string-normalization = true
target-version = ["py310"]

[tool.isort]
atomic = true
profile = "black"
src_paths = ["<package_name>", "examples"]
known_first_party = ["<package_name>", "lputil", "sftproc"]
extra_standard_library = ["typing_extensions"]
indent = 4
line_length = 100
lines_after_imports = 2
multi_line_output = 3

[tool.codespell]
ignore-words = "docs/spelling_wordlist.txt"

[tool.ruff]
target-version = "py310"
line-length = 100
output-format = "full"
src = ["<package_name>", "examples"]

[tool.ruff.lint]
select = [
    "E", "W",  # pycodestyle
    "F",       # pyflakes
    "N",       # pep8-naming
    "UP",      # pyupgrade
    "ANN",     # flake8-annotations
    "S",       # flake8-bandit
    "BLE",     # flake8-blind-except
    "B",       # flake8-bugbear
    "COM",     # flake8-commas
    "C4",      # flake8-comprehensions
    "EXE",     # flake8-executable
    "FA",      # flake8-future-annotations
    "LOG",     # flake8-logging
    "ISC",     # flake8-implicit-str-concat
    "INP",     # flake8-no-pep420
    "PIE",     # flake8-pie
    "PYI",     # flake8-pyi
    "Q",       # flake8-quotes
    "RSE",     # flake8-raise
    "RET",     # flake8-return
    "SIM",     # flake8-simplify
    "TID",     # flake8-tidy-imports
    "TCH",     # flake8-type-checking
    "PERF",    # perflint
    "FURB",    # refurb
    "TRY",     # tryceratops
    "RUF",     # ruff
]
ignore = [
    # E501: line too long
    # W505: doc line too long
    # too long docstring due to long example blocks
    "E501",
    "W505",
    # ANN101: missing type annotation for `self` in method
    # ANN102: missing type annotation for `cls` in classmethod
    "ANN101",
    "ANN102",
    # ANN401: dynamically typed expressions (typing.Any) are disallowed
    "ANN401",
    # S101: use of `assert` detected
    # internal use and may never raise at runtime
    "S101",
    # S311: random number generator not cryptographically secure
    # not a security-sensitive application
    "S311",
    # SIM105: use `contextlib.suppress(...)` instead of try-except-pass
    # reduce unnecessary function call
    "SIM105",
    # TRY003: avoid specifying long messages outside the exception class
    # long messages are necessary for clarity
    "TRY003",
]
typing-modules = ["<package_name>.typing"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401",    # unused-import
]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
multiline-quotes = "double"
inline-quotes = "single"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"
