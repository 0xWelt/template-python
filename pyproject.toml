[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "template_python"
description = "My awesome python project"

readme = "README.md"
requires-python = ">= 3.12"
authors = [
    { name = "0xWelt", email = "dinghao12601@126.com" },
]
license = { text = "MIT License" }
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Operating System :: POSIX :: Linux",
]
dynamic = ["version"]

dependencies = [
    "pydantic>=2.11.7",
]

[project.optional-dependencies]
dev = [
    "coverage",
    "pre-commit",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-timeout",
    "pytest-xdist",
    "pytest",
]

[project.urls]
Homepage = "https://github.com/0xWelt/template_python"
Repository = "https://github.com/0xWelt/template_python"

[tool.setuptools.packages.find]
include = ["template_python", "template_python.*"]

[tool.setuptools.dynamic]
version = {attr = "template_python.__version__"}

# Pytest
[tool.pytest.ini_options]
filterwarnings = [
    "ignore::DeprecationWarning",
]
asyncio_default_fixture_loop_scope = "function"
# Print slowest 5 tests
addopts = ['--durations=5', '-rsfE', '--color=yes']
timeout = 300
session_timeout = 480


# Linter tools #################################################################

[tool.codespell]
ignore-words = "docs/spelling_wordlist.txt"

[tool.ruff]
target-version = "py312"
line-length = 100
output-format = "full"
src = ["template_python", "examples"]

[tool.ruff.format]
quote-style = "single"
docstring-code-format = false
skip-magic-trailing-comma = false

[tool.ruff.lint]
select = [
    "E", "W",  # pycodestyle
    "F",       # pyflakes
    "I",       # isort
    "N",       # pep8-naming
    "UP",      # pyupgrade
    "ANN",     # flake8-annotations
    "S",       # flake8-bandit
    "BLE",     # flake8-blind-except
    "B",       # flake8-bugbear
    "COM",     # flake8-commas
    "C4",      # flake8-comprehensions
    "C901",    # mccabe complexity
    "EXE",     # flake8-executable
    "FA",      # flake8-future-annotations
    "ISC",     # flake8-implicit-str-concat
    "LOG",     # flake8-logging
    "PIE",     # flake8-pie
    "PYI",     # flake8-pyi
    "Q",       # flake8-quotes
    "RSE",     # flake8-raise
    "SIM",     # flake8-simplify
    "TID",     # flake8-tidy-imports
    "TC",      # flake8-type-checking
    "PERF",    # perflint
    "FURB",    # refurb
    "TRY",     # tryceratops
    "RUF",     # ruff
    "ASYNC",   # flake8-async
    "PLR0913",  # too many arg
    "PLR0917",  # too many pos arg
    "PLR0915",  # too many stmt
]
ignore = [
    "ANN002",  # missing-type-args
    "ANN003",  # missing-type-kwargs
    "ANN204",  # missing-return-type-special-method
    "ANN401",  # any-type
    "B027",    # empty-method-without-abstract-decorator
    "B905",    # zip-without-explicit-strict, we use `zip-strict-fixer` instead
    "C416",    # unnecessary-comprehension
    "COM812",  # missing-trailing-comma
    "E501",    # line-too-long
    "N802",    # invalid-function-name
    "RUF005",  # collection-literal-concatenation
    "S101",    # assert
    "S105",    # hardcoded-password-string
    "S106",    # hardcoded-password-func-arg
    "S107",    # hardcoded-password-default
    "S108",    # hardcoded-temp-file
    "S301",    # suspicious-pickle-usage
    "S311",    # suspicious-non-cryptographic-random-usage
    "S324",    # hashlib-insecure-hash-function
    "SIM105",  # suppressible-exception
    "SIM108",  # if-else-block-instead-of-if-exp
    "TID252",  # relative-imports
    "TRY003",  # raise-vanilla-args
    "TRY400",  # error-instead-of-exception
    "W505",    # doc-line-too-long
]
typing-modules = ["template_python.typing"]
allowed-confusables = ["，", "。", "：", "？", "！", "、", "（", "）", "；", "“", "”"]
extend-safe-fixes = [
    "C408",     # unnecessary-collection-call
    "E711",     # none-comparison
    "FURB129",  # readlines-in-for
    "PERF102",  # incorrect-dict-iterator
    "PIE810",   # multiple-starts-ends-with
    "SIM102",   # collapsible-if
    "TC001",    # typing-only-first-party-import
    "TC002",    # typing-only-third-party-import
    "TC003",    # typing-only-standard-library-import
    "TC004",    # runtime-import-in-type-checking-block
    "TRY201",   # verbose-raise
    "UP004",    # useless-object-inheritance
    "UP008",    # super-call-with-parameters
    "UP038",    # non-pep604-isinstance
    "UP039",    # unnecessary-class-parentheses
]

[tool.ruff.lint.mccabe]
max-complexity = 17

[tool.ruff.lint.pylint]
max-args = 15
max-positional-args = 5
max-statements = 60

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401",     # unused-import
]
"examples/**/*.py" = [
    "TID252",   # relative-imports
]

"test/**/*.py" = [
    "ANN",      # flake8-annotations
    "S108",     # hardcoded-temp-file
    "PLR0915",
]

[tool.ruff.lint.isort]
known-first-party = ["template_python"]
known-local-folder = ["template_python", "examples", "tests"]
lines-after-imports = 2

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
suppress-dummy-args = true
suppress-none-returning = true


[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = ["pydantic.BaseModel"]
runtime-evaluated-decorators = ["pydantic.validate_call"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
multiline-quotes = "double"
inline-quotes = "single"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"
